name: build

on:
  push:
    paths-ignore:
      - 'LICENSE'
      - 'README.*'
      - '*/README.*'
      - 'docs/*'
  release:
    types: [published]

env:
  APP_NAME: nimbot
  IMAGE: jiro4989/nimbot/runtime
  DOCKER_REGISTORY: jiro4989/nimbot

jobs:
  skip:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Skip job"

  before:
    runs-on: ubuntu-latest
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - run: echo "no [skip ci]"

  build:
    runs-on: ubuntu-latest
    needs: before
    steps:
      - uses: actions/checkout@v1
      - name: Login docker
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin
      - name: Build compiler
        run: docker-compose -f compiler.yml build
      - name: Build app
        run: docker-compose -f .github/build.yml build
      - name: Push image to docker registory
        run: |
          docker push ${{ env.DOCKER_REGISTORY }}:server-runtime
          docker push ${{ env.DOCKER_REGISTORY }}:executor-runtime
          docker push ${{ env.DOCKER_REGISTORY }}:fluentd-runtime
          docker push ${{ env.DOCKER_REGISTORY }}:compiler-stable
          docker push ${{ env.DOCKER_REGISTORY }}:compiler-devel

      # - name: Check apps
      #   run: ls -lah bin/
      # - name: Archive release files
      #   run: |
      #     mkdir -p dist/${{ env.APP_NAME }}
      #     cp -r bin dist/${{ env.APP_NAME }}
      #     git describe --tags --abbrev=0 > dist/${{ env.APP_NAME }}/tag.txt
      #     pushd dist
      #     tar czf ${{ env.APP_NAME }}.tar.gz ${{ env.APP_NAME }}
      #     popd
      #     ls -lah dist/${{ env.APP_NAME }}.tar.gz
      # - name: Upload artifact
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: app
      #     path: dist/${{ env.APP_NAME }}.tar.gz
      #   if: startsWith(github.ref, 'refs/tags/')

  create-tag-draft:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: build
    steps:
      - uses: release-drafter/release-drafter@v5.3.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: app
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: app/${{ env.APP_NAME }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # # NOTE: ちょっと時間かかるけれど、一旦はここでビルドする
      # - uses: actions/checkout@v1
      # - name: Build images latest
      #   run: docker build -f Dockerfile -t ${{ env.IMAGE }}:latest .
      # - name: Build images devel
      #   run: docker build -f Dockerfile_devel -t ${{ env.IMAGE }}:devel .
      # - name: Release docker images
      #   run: |
      #     mkdir -p dist/dockerimage
      #     docker save ${{ env.IMAGE }}:latest -o dist/dockerimage/latest.tar
      #     docker save ${{ env.IMAGE }}:devel -o dist/dockerimage/devel.tar
      #     pushd dist
      #     tar czf dockerimage.tar.gz dockerimage
      #     popd
      #     ls -lah dist
      # - name: Release docker image
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: dist/dockerimage.tar.gz
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy app
        run: curl -X POST -H "${{ env.HEADER }}" -d '${{ env.BODY }}' ${{ secrets.DEPLOY_URL }}
        env:
          HEADER: "Content-Type: application/json"
          BODY: '{"text": "sushi"}'
